n1 = prompt("Entre com o primeiro valor: ");
n2 = prompt("Entre com o segundo valor: ");
n1 = parseInt(n1);
n2 = parseInt(n2);

if (n1 < n2) {
    while (n1 < n2) {
    console.log(n1);
    n1 = n1 + 1; 
    } 
} else {
    while (n2 < n1) {
        console.log(n2);
        n2 = n2 + 1;
    }
}

//ExercÃ­cio 3
// entrada = prompt("Entre com o menor valor:");
// i = parseInt(entrada);
// entrada = prompt("Entre com o maior valor:");
// maior = parseInt(entrada);

// if( maior < i ){
//   temp = maior;
//   maior = i;
//   i = temp;
// }

// while (i <= maior) {
//   console.log(i);
//   i = i + 1;
// }
// console.log("fim");


// Os dois cÃ³digos tÃªm a mesma funÃ§Ã£o: imprimir todos os nÃºmeros inteiros em ordem crescente entre dois valores informados pelo usuÃ¡rio. No5 entanto, o segundo cÃ³digo (ExercÃ­cio 3) Ã© preferÃ­vel por ser mais eficiente e robusto. Aqui estÃ£o os motivos:

// ðŸŸ¢ Vantagens do segundo cÃ³digo (ExercÃ­cio 3):
// Evita cÃ³digo duplicado:

// No primeiro cÃ³digo, hÃ¡ dois loops while separados para os casos n1 < n2 e n2 < n1. Isso faz com que a lÃ³gica seja escrita duas vezes, o que torna o cÃ³digo mais difÃ­cil de manter e aumentar a chance de erros.
// No segundo cÃ³digo, a troca de valores (temp = maior; maior = i; i = temp;) garante que i sempre comece com o menor nÃºmero. Assim, o loop while funciona com um Ãºnico bloco de cÃ³digo.
// Menos verificaÃ§Ãµes desnecessÃ¡rias:

// O segundo cÃ³digo nÃ£o precisa de um else separado, pois jÃ¡ ajusta os valores antes do while, tornando-o mais limpo e eficiente.
// Evita erro de comparaÃ§Ã£o estrita (< vs <=):

// No primeiro cÃ³digo, se n1 e n2 forem iguais, nenhum dos loops while serÃ¡ executado. O segundo cÃ³digo resolve isso garantindo que o loop rode pelo menos uma vez, imprimindo i caso i == maior.
// Inclui uma saÃ­da clara ("fim") no final:

// O segundo cÃ³digo imprime "fim" apÃ³s o loop, o que melhora a legibilidade da saÃ­da no console.
// ðŸ”´ Problemas do primeiro cÃ³digo:
// CÃ³digo duplicado:

// HÃ¡ dois blocos while separados, o que Ã© desnecessÃ¡rio.
// LÃ³gica mais confusa:

// O primeiro cÃ³digo depende do if para decidir qual loop executar, enquanto o segundo ajusta os valores antes do loop, tornando a lÃ³gica mais clara.
// Menos flexÃ­vel:

// O primeiro cÃ³digo pode falhar se os valores forem iguais (n1 == n2), pois nenhum while serÃ¡ executado.
// ConclusÃ£o
// âœ… O segundo cÃ³digo (ExercÃ­cio 3) Ã© a melhor opÃ§Ã£o porque:
// âœ” Usa apenas um loop while, tornando-o mais simples e eficiente.
// âœ” Evita cÃ³digo duplicado.
// âœ” Funciona corretamente mesmo que os valores sejam inseridos em qualquer ordem.
// âœ” Tem melhor legibilidade e manutenÃ§Ã£o.

// Se precisar de mais explicaÃ§Ãµes, me avise! ðŸš€